#include "lizard.h"
#include <stdio.h>
#include <ctime>
#include <math.h>
#include <stdlib.h>


float w0[] = {

    // w0 white pawn

    0.000,  0.000,  0.000,  0.000,  0.000,  0.000,  0.000,  0.000,
    0.100,  0.100,  0.100,  0.060,  0.060,  0.100,  0.100,  0.100,
    0.101,  0.102,  0.103,  0.090,  0.090,  0.003,  0.002,  0.001,
    0.102,  0.104,  0.106,  0.108,  0.108,  0.106,  0.104,  0.102,
    0.103,  0.106,  0.109,  0.112,  0.112,  0.109,  0.106,  0.103,
    0.104,  0.108,  0.112,  0.116,  0.116,  0.112,  0.108,  0.104,
    0.105,  0.110,  0.015,  0.120,  0.120,  0.115,  0.110,  0.105,
    0.000,  0.000,  0.000,  0.000,  0.000,  0.000,  0.000,  0.000,

    // w0 white knight

    0.288,  0.270,  0.290,  0.290,  0.290,  0.290,  0.270, 0.288,
    0.290,  0.300,  0.300,  0.300,  0.300,  0.300,  0.300, 0.290,
    0.290,  0.300,  0.305,  0.306,  0.306,  0.305,  0.300, 0.290,
    0.290,  0.300,  0.306,  0.312,  0.312,  0.306,  0.300, 0.290,
    0.290,  0.300,  0.306,  0.312,  0.312,  0.306,  0.300, 0.290,
    0.290,  0.300,  0.305,  0.306,  0.306,  0.305,  0.300, 0.290,
    0.290,  0.300,  0.300,  0.300,  0.300,  0.300,  0.300, 0.290,
    0.248,  0.290,  0.290,  0.290,  0.290,  0.290,  0.290, 0.248,

    // w0 white bishop

    0.300,  0.300,  0.280,  0.300,  0.300,  0.280,  0.300, 0.300,
    0.300,  0.310,  0.310,  0.310,  0.310,  0.310,  0.310, 0.300,
    0.300,  0.310,  0.315,  0.316,  0.316,  0.315,  0.310, 0.300,
    0.300,  0.310,  0.316,  0.320,  0.320,  0.316,  0.310, 0.300,
    0.300,  0.310,  0.316,  0.320,  0.320,  0.316,  0.310, 0.300,
    0.300,  0.310,  0.315,  0.316,  0.316,  0.315,  0.310, 0.300,
    0.300,  0.310,  0.310,  0.310,  0.310,  0.310,  0.310, 0.300,
    0.300,  0.300,  0.300,  0.300,  0.300,  0.300,  0.300, 0.300,

    // w0 white rook

    0.500,  0.500,  0.500,  0.500,  0.500,  0.500,  0.500,  0.500,
    0.500,  0.500,  0.500,  0.500,  0.500,  0.500,  0.500,  0.500,
    0.500,  0.500,  0.500,  0.500,  0.500,  0.500,  0.500,  0.500,
    0.500,  0.500,  0.500,  0.500,  0.500,  0.500,  0.500,  0.500,
    0.500,  0.500,  0.500,  0.500,  0.500,  0.500,  0.500,  0.500,
    0.500,  0.500,  0.500,  0.500,  0.500,  0.500,  0.500,  0.500,
    0.510,  0.510,  0.510,  0.510,  0.510,  0.510,  0.510,  0.510,
    0.500,  0.500,  0.500,  0.500,  0.500,  0.500,  0.500,  0.500,

    // w0 white queen

    0.925,  0.925,  0.925,  0.925,  0.925,  0.925,  0.925,  0.925,
    0.925,  0.925,  0.925,  0.925,  0.925,  0.925,  0.925,  0.925,
    0.925,  0.925,  0.925,  0.925,  0.925,  0.925,  0.925,  0.925,
    0.925,  0.925,  0.925,  0.925,  0.925,  0.925,  0.925,  0.925,
    0.925,  0.925,  0.925,  0.925,  0.925,  0.925,  0.925,  0.925,
    0.925,  0.925,  0.925,  0.925,  0.925,  0.925,  0.925,  0.925,
    0.925,  0.925,  0.925,  0.925,  0.925,  0.925,  0.925,  0.925,
    0.925,  0.925,  0.925,  0.925,  0.925,  0.925,  0.925,  0.925,

    // w0 white king

    0.000,  0.000,  0.000,  0.000,  0.000,  0.000,  0.000,  0.000,
    0.000,  0.000,  0.000,  0.000,  0.000,  0.000,  0.000,  0.000,
    0.000,  0.000,  0.000,  0.000,  0.000,  0.000,  0.000,  0.000,
    0.000,  0.000,  0.000,  0.000,  0.000,  0.000,  0.000,  0.000,
    0.000,  0.000,  0.000,  0.000,  0.000,  0.000,  0.000,  0.000,
    0.000,  0.000,  0.000,  0.000,  0.000,  0.000,  0.000,  0.000,
    0.000,  0.000,  0.000,  0.000,  0.000,  0.000,  0.000,  0.000,
    0.000,  0.000,  0.000,  0.000,  0.000,  0.000,  0.000,  0.000,

    // w0 black pawn

    0.000,  0.000,  0.000,  0.000,  0.000,  0.000,  0.000,  0.000,
   -0.105, -0.110, -0.115, -0.120, -0.120, -0.115, -0.110, -0.105,
   -0.104, -0.108, -0.112, -0.116, -0.116, -0.112, -0.108, -0.104,
   -0.103, -0.106, -0.109, -0.112, -0.112, -0.109, -0.106, -0.103,
   -0.102, -0.104, -0.106, -0.108, -0.108, -0.106, -0.104, -0.102,
   -0.101, -0.102, -0.103, -0.090, -0.090, -0.103, -0.102, -0.101,
   -0.100, -0.100, -0.100, -0.060, -0.060, -0.100, -0.100, -0.100,
    0.000,  0.000,  0.000,  0.000,  0.000,  0.000,  0.000,  0.000,

    // w0 black knight

   -0.248,  -0.290,  -0.290,  -0.290,  -0.290,  -0.290,  -0.290, -0.248,
   -0.290,  -0.300,  -0.300,  -0.300,  -0.300,  -0.300,  -0.300, -0.290,
   -0.290,  -0.300,  -0.305,  -0.306,  -0.306,  -0.305,  -0.300, -0.290,
   -0.290,  -0.300,  -0.306,  -0.312,  -0.312,  -0.306,  -0.300, -0.290,
   -0.290,  -0.300,  -0.306,  -0.312,  -0.312,  -0.306,  -0.300, -0.290,
   -0.290,  -0.300,  -0.305,  -0.306,  -0.306,  -0.305,  -0.300, -0.290,
   -0.290,  -0.300,  -0.300,  -0.300,  -0.300,  -0.300,  -0.300, -0.290,
   -0.288,  -0.270,  -0.290,  -0.290,  -0.290,  -0.290,  -0.270, -0.288,

   // w0 black bishop

  -0.300,  -0.300,  -0.300,  -0.300,  -0.300,  -0.300,  -0.300, -0.300,
  -0.300,  -0.310,  -0.310,  -0.310,  -0.310,  -0.310,  -0.310, -0.300,
  -0.300,  -0.310,  -0.315,  -0.316,  -0.316,  -0.315,  -0.310, -0.300,
  -0.300,  -0.310,  -0.316,  -0.320,  -0.320,  -0.316,  -0.310, -0.300,
  -0.300,  -0.310,  -0.316,  -0.320,  -0.320,  -0.316,  -0.310, -0.300,
  -0.300,  -0.310,  -0.315,  -0.316,  -0.316,  -0.315,  -0.310, -0.300,
  -0.300,  -0.310,  -0.310,  -0.310,  -0.310,  -0.310,  -0.310, -0.300,
  -0.300,  -0.300,  -0.280,  -0.300,  -0.300,  -0.280,  -0.300, -0.300,

  // w0 black rook

  -0.500,  -0.500,  -0.500,  -0.500,  -0.500,  -0.500,  -0.500,  -0.500,
  -0.510,  -0.510,  -0.510,  -0.510,  -0.510,  -0.510,  -0.510,  -0.510,
  -0.500,  -0.500,  -0.500,  -0.500,  -0.500,  -0.500,  -0.500,  -0.500,
  -0.500,  -0.500,  -0.500,  -0.500,  -0.500,  -0.500,  -0.500,  -0.500,
  -0.500,  -0.500,  -0.500,  -0.500,  -0.500,  -0.500,  -0.500,  -0.500,
  -0.500,  -0.500,  -0.500,  -0.500,  -0.500,  -0.500,  -0.500,  -0.500,
  -0.500,  -0.500,  -0.500,  -0.500,  -0.500,  -0.500,  -0.500,  -0.500,
  -0.500,  -0.500,  -0.500,  -0.500,  -0.500,  -0.500,  -0.500,  -0.500,

  -0.925,  -0.925,  -0.925,  -0.925,  -0.925,  -0.925,  -0.925,  -0.925,
  -0.925,  -0.925,  -0.925,  -0.925,  -0.925,  -0.925,  -0.925,  -0.925,
  -0.925,  -0.925,  -0.925,  -0.925,  -0.925,  -0.925,  -0.925,  -0.925,
  -0.925,  -0.925,  -0.925,  -0.925,  -0.925,  -0.925,  -0.925,  -0.925,
  -0.925,  -0.925,  -0.925,  -0.925,  -0.925,  -0.925,  -0.925,  -0.925,
  -0.925,  -0.925,  -0.925,  -0.925,  -0.925,  -0.925,  -0.925,  -0.925,
  -0.925,  -0.925,  -0.925,  -0.925,  -0.925,  -0.925,  -0.925,  -0.925,
  -0.925,  -0.925,  -0.925,  -0.925,  -0.925,  -0.925,  -0.925,  -0.925,

  0.000,  0.000,  0.000,  0.000,  0.000,  0.000,  0.000,  0.000,
  0.000,  0.000,  0.000,  0.000,  0.000,  0.000,  0.000,  0.000,
  0.000,  0.000,  0.000,  0.000,  0.000,  0.000,  0.000,  0.000,
  0.000,  0.000,  0.000,  0.000,  0.000,  0.000,  0.000,  0.000,
  0.000,  0.000,  0.000,  0.000,  0.000,  0.000,  0.000,  0.000,
  0.000,  0.000,  0.000,  0.000,  0.000,  0.000,  0.000,  0.000,
  0.000,  0.000,  0.000,  0.000,  0.000,  0.000,  0.000,  0.000,
  0.000,  0.000,  0.000,  0.000,  0.000,  0.000,  0.000,  0.0 };

float wHidden[] = { 1.00,       -1.00,  0.19207816550360182, -0.28545539328691016,  0.396588188150865,   0.24695236128807903, -0.5362844906950327,  -0.36544576791639924, 0.5858902293789134,  -4.983334886709058,   0.1159384389075866, -0.8235507819879793,  -0.4827469992529991,  0.3952820198071656,   0.7431459595356849, -0.23778352844608216 };
float wOutput[] = { 1000.00, -1000.00, -0.27538945931732184, -0.14496171160695885,  0.4059277750577273, -0.23205661176809835,  0.18803239356195105, -0.2353651271910541,  0.12724667051168264, -2.8969126345149547, -0.34088263659032823, 0.62767366336512556, -0.23397834187873325, 0.11224404425735584, -0.36588433552593305, 0.638889601555899493 };

void cNetwork::Init(int x) {

    finalWeight = 1.00;

    for (int i = 0; i < 16; i++) {
        hiddenWeights[i] = wOutput[i];
        outputWeights[i] = wHidden[i];
    }

    LoadWeights("lizard_weights.bin");
    
    //SaveWeights("lizard_weights.bin");
    //Reset();
};

void cNetwork::Reset() {

    // Initialize with small random values

    for (int i = 0; i < 16; i++)
        for (int j = 0; j < 768; j++) {
            weights[i][j] = GetXavierValue();
        }

    // Pre-initialize first two tables
    // (material weights and some centre tropism
    //  for minor pieces)

    for (int i = 0; i < 768; i++) {
        weights[0][i] += w0[i];
        weights[1][i] += w0[i];
    }

    SaveWeights("lizard_weights.bin");
}

void cNetwork::PerturbWeight(float x) {
    // Generate a random index for the weight to perturb
    int i = rand() % 16;
    int j = rand() % 768;
    if (j < 7) j = rand() % 768;

    // Generate a random sign for the perturbation
    float sign = (rand() % 2) ? 1.0 : -1.0;

    // Perturb the weight by x or -x
    weights[i][j] += sign * x;
}

float cNetwork::GetXavierValue() {

    float mean = 0;
    float stddev = sqrt(1.0 / 768); // Xavier initialization
    return (float)rand() / RAND_MAX * 2 * stddev - stddev;
}

void cNetwork::PrintWeights() {

    for (int i = 0; i < 16; i++) {
        for (int j = 0; j < 768; j++) {
            printf("[%d]:%.4f ", j, weights[i][j]);
            if ((j + 1) % 8 == 0) {
                printf("\n");
            }
            if ((j + 1) % 64 == 0) {
                printf("\n");
            }
        }
        if ((i + 1) % 4 == 0) {
            printf("\n");
        }
    }
}

void cNetwork::SaveWeights(const char* filename) {
    FILE* file = fopen(filename, "wb");

    if (!file) {
        perror("Error opening file for writing");
        return;
    }

    // Write the number of weights to the file
    int numWeights = 16 * 768;
    fwrite(&numWeights, sizeof(numWeights), 1, file);

    // Write the weights to the file
    for (int i = 0; i < 16; i++) {
        for (int j = 0; j < 768; j++) {
            fwrite(&weights[i][j], sizeof(weights[i][j]), 1, file);
        }
    }

    fclose(file);
}

void cNetwork::LoadWeights(const char* filename) {
    FILE* file = fopen(filename, "rb");

    if (!file) {
        perror("Error opening file for reading");
        return;
    }

    // Read the number of weights from the file
    int numWeights;
    fread(&numWeights, sizeof(numWeights), 1, file);

    // Check that the number of weights matches the expected value
    if (numWeights != 16 * 768) {
        fprintf(stderr, "Error: Invalid number of weights in file %s.\n", filename);
        return;
    }

    // Read the weights from the file
    for (int i = 0; i < 16; i++) {
        for (int j = 0; j < 768; j++) {
            fread(&weights[i][j], sizeof(weights[i][j]), 1, file);
        }
    }

    fclose(file);
}